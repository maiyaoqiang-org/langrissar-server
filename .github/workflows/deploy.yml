name: Deploy to ACR

on:
  push:
    branches:
      - main
      - test
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Aliyun ACR
        uses: docker/login-action@v2
        with:
          registry: crpi-98ymlx0yqe646pye.cn-guangzhou.personal.cr.aliyuncs.com
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
      - name: Clean up old images
        run: |
          docker images --format "{{.Repository}}:{{.Tag}}" | grep "crpi-98ymlx0yqe646pye.cn-guangzhou.personal.cr.aliyuncs.com/myq-space/langrissar-server" | xargs -r docker rmi

      - name: Build and Push
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          NODE_ENV: production
        run: |
          echo "DB_HOST=$DB_HOST" >> .env.production
          echo "DB_PORT=$DB_PORT" >> .env.production
          echo "DB_USERNAME=$DB_USERNAME" >> .env.production
          echo "DB_PASSWORD=$DB_PASSWORD" >> .env.production
          echo "DB_DATABASE=$DB_DATABASE" >> .env.production
          echo "NODE_ENV=$NODE_ENV" >> .env.production
          docker buildx build --push --platform linux/amd64 --progress plain --tag crpi-98ymlx0yqe646pye.cn-guangzhou.personal.cr.aliyuncs.com/myq-space/langrissar-server:latest .

      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            # 创建日志目录并设置权限
            mkdir -p /data/langrissar/logs
            chmod 777 /data/langrissar/logs

            # 清理未使用的同名镜像
            docker images --format "{{.Repository}}:{{.Tag}}" | grep "crpi-98ymlx0yqe646pye.cn-guangzhou.personal.cr.aliyuncs.com/myq-space/langrissar-server" | xargs -r docker rmi
            
            # 拉取最新镜像
            docker pull crpi-98ymlx0yqe646pye.cn-guangzhou.personal.cr.aliyuncs.com/myq-space/langrissar-server:latest
            
           
            
            # 确定当前运行的容器和端口，以及新容器的端口
            BLUE_PORT=6088
            GREEN_PORT=6089
            CURRENT_COLOR=""
            NEW_COLOR=""
            NEW_PORT=0
            
            # 检查哪个端口正在被Nginx使用 (这部分逻辑需要根据您的Nginx配置来确定)
            # 简单示例：假设我们通过检查哪个容器在运行来判断
            if docker ps -q -f name=langrissar-server-blue | grep -q .; then
              CURRENT_COLOR="blue"
              NEW_COLOR="green"
              NEW_PORT=$GREEN_PORT
              CURRENT_PORT=$BLUE_PORT
            else
              CURRENT_COLOR="green"
              NEW_COLOR="blue"
              NEW_PORT=$BLUE_PORT
              CURRENT_PORT=$GREEN_PORT
            fi
            
            echo "当前活动的颜色: $CURRENT_COLOR (端口: $CURRENT_PORT)"
            echo "将部署新的颜色: $NEW_COLOR (端口: $NEW_PORT)"
            
            # 停止并移除可能存在的旧的NEW_COLOR容器
            docker stop langrissar-server-$NEW_COLOR || true
            docker rm langrissar-server-$NEW_COLOR || true
            
            # 启动新容器，监听新的端口
            docker run -d -p $NEW_PORT:3000 \
              --restart unless-stopped \
              -e DB_HOST=172.17.0.1 \
              -e DB_PORT=3306 \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e DB_DATABASE=${{ secrets.DB_DATABASE }} \
              -e NODE_ENV=production \
              -v /data/langrissar/logs:/app/logs \
              --name langrissar-server-$NEW_COLOR \
              crpi-98ymlx0yqe646pye.cn-guangzhou.personal.cr.aliyuncs.com/myq-space/langrissar-server:latest
            
            # 等待新容器启动并健康检查
            echo "等待新容器 langrissar-server-$NEW_COLOR (端口 $NEW_PORT) 启动并进行健康检查..."
            HEALTH_CHECK_URL="http://127.0.0.1:$NEW_PORT/"
            MAX_ATTEMPTS=10 # 最多尝试10次
            RETRY_INTERVAL=6 # 每次尝试间隔6秒 (总共最多等待60秒)
            ATTEMPT_NUM=0
            
            until [ $ATTEMPT_NUM -ge $MAX_ATTEMPTS ]
            do
              ATTEMPT_NUM=$((ATTEMPT_NUM+1))
              echo "健康检查尝试 #${ATTEMPT_NUM}: 正在请求 $HEALTH_CHECK_URL"
              # 使用 curl 进行健康检查，只关心HTTP状态码，设置连接超时和最大请求时间
              HTTP_STATUS=$(curl --silent --output /dev/null --write-out "%{http_code}" --connect-timeout 5 --max-time 5 $HEALTH_CHECK_URL)
              
              if [ "$HTTP_STATUS" -eq 200 ]; then
                echo "健康检查成功，新容器已就绪 (HTTP状态码: $HTTP_STATUS)。"
                break
              else
                echo "健康检查失败 (HTTP状态码: $HTTP_STATUS)。将在 $RETRY_INTERVAL 秒后重试..."
                if [ $ATTEMPT_NUM -lt $MAX_ATTEMPTS ]; then
                  sleep $RETRY_INTERVAL
                else
                  echo "已达到最大健康检查尝试次数，新容器启动失败。"
                  break # 跳出循环，后续逻辑会判断容器是否成功启动
                fi
              fi
            done
            
            # 检查新容器是否最终被认为是正常运行 (基于健康检查结果)
            # 我们需要确保HTTP_STATUS是200，并且docker ps也能找到容器
            if [ "$HTTP_STATUS" -eq 200 ] && docker ps -q -f name=langrissar-server-$NEW_COLOR | grep -q .; then
              echo "新容器 langrissar-server-$NEW_COLOR 已成功启动并通过健康检查。"
              
              # 修改Nginx配置指向新容器的端口
              echo "更新Nginx upstream配置 langrissar_backend 指向端口 $NEW_PORT..."
              sudo sed -i "s/server 127.0.0.1:[0-9]\{4\};/server 127.0.0.1:$NEW_PORT;/g" /etc/nginx/conf.d/langrissar-upstream.conf
              
              # 重新加载Nginx配置
              echo "重新加载Nginx配置..."
              sudo nginx -s reload
              
              echo "流量已切换到 langrissar-server-$NEW_COLOR"
              
              # 停止旧容器 (在流量切换后，可以安全停止)
              echo "停止旧容器 langrissar-server-$CURRENT_COLOR..."
              docker stop langrissar-server-$CURRENT_COLOR || true
              # docker rm langrissar-server-$CURRENT_COLOR || true # 可选：立即删除或保留一段时间
              
              # 发送部署成功飞书通知
              FEISHU_WEBHOOK_URL="https://open.feishu.cn/open-apis/bot/v2/hook/77f093f4-a3a6-41cc-8f38-167cdcb49b8c"
              MESSAGE="✅ 部署成功: langrissar-server 已更新到 $NEW_COLOR 版本 (端口 $NEW_PORT)。"
              curl -X POST -H "Content-Type: application/json" -d '{"msg_type":"text","content":{"text":"'"$MESSAGE"'"}}' $FEISHU_WEBHOOK_URL
              
              echo "部署完成，当前活动容器: langrissar-server-$NEW_COLOR"
            else
              echo "新容器 langrissar-server-$NEW_COLOR 启动失败或未通过健康检查 (最后状态码: $HTTP_STATUS)。保持旧容器 langrissar-server-$CURRENT_COLOR 运行。"
              
              # 发送部署失败飞书通知
              FEISHU_WEBHOOK_URL="https://open.feishu.cn/open-apis/bot/v2/hook/77f093f4-a3a6-41cc-8f38-167cdcb49b8c"
              MESSAGE="❌ 部署失败: langrissar-server $NEW_COLOR 版本启动失败或健康检查未通过 (最后状态码: $HTTP_STATUS)。旧容器 $CURRENT_COLOR 保持运行。"
              curl -X POST -H "Content-Type: application/json" -d '{"msg_type":"text","content":{"text":"'"$MESSAGE"'"}}' $FEISHU_WEBHOOK_URL

              # 如果新容器启动失败，清理掉失败的容器
              docker stop langrissar-server-$NEW_COLOR || true
              # docker rm langrissar-server-$NEW_COLOR || true
            fi
